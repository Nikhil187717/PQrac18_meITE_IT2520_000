/*
 HC-SR04 Ping distance sensor]
 VCC to arduino 5v GND to arduino GND
 Echo to Arduino pin 13 Trig to Arduino pin 12
 Red POS to Arduino pin 11
 Green POS to Arduino pin 10
 560 ohm resistor to both LED NEG and GRD power rail
 More info at: http://goo.gl/kJ8Gl
 Original code improvements to the Ping sketch sourced from Trollmaker.com
 Some code and wiring inspired by http://en.wikiversity.org/wiki/User:Dstaub/robotcar
 */

#define trigPin 13
#define echoPin 12
#define led 11
#define led2 10

void setup() {
  Serial.begin (9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(led, OUTPUT);
  pinMode(led2, OUTPUT);
}

void loop() {
  long duration, distance;
  digitalWrite(trigPin, LOW);  // Added this line
  delayMicroseconds(2); // Added this line
  digitalWrite(trigPin, HIGH);
//  delayMicroseconds(1000); - Removed this line
  delayMicroseconds(10); // Added this line
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration/2) / 29.1;
  if (distance < 4) {  // This is where the LED On/Off happens
    digitalWrite(led,HIGH); // When the Red condition is met, the Green LED should turn off
  digitalWrite(led2,LOW);
}
  else {
    digitalWrite(led,LOW);
    digitalWrite(led2,HIGH);
  }
  if (distance >= 200 || distance <= 0){
    Serial.println("Out of range");
  }
  else {
    Serial.print(distance);
    Serial.println(" cm");
  }
  delay(500);
}


trigPin is connected to Pin 13 (triggers the ultrasonic sensor).

echoPin is connected to Pin 12 (receives the echo).

led is the Red LED on Pin 11.

led2 is the Green LED on Pin 10.

Serial.begin(9600) starts serial communication at 9600 baud rate so that distance can be printed to the Serial Monitor.

trigPin (13) is set as OUTPUT (to send pulse).

echoPin (12) is set as INPUT (to receive the echo).

led (red) and led2 (green) are both OUTPUTs to control LEDs.

The loop() function runs repeatedly. duration stores pulse time, and distance stores calculated distance.

Make sure the trigger pin is LOW for 2 microseconds to ensure clean signal start.

This sends a 10 microsecond HIGH pulse to the HC-SR04 trig pin, which starts the ultrasonic burst.

pulseIn() measures the time (in microseconds) for the echo pin to go HIGH (i.e., receive reflected sound).

Converts the duration to distance in centimeters:

duration / 2: because sound travels to the object and back.

/ 29.1: since sound travels at ~343 m/s = 29.1 µs/cm.

If object is less than 4 cm away:

Turn ON red LED (danger/alert).

Turn OFF green LED.

 If object is 4 cm or more away:

Turn OFF red LED, Turn ON green LED (safe zone).

If the distance is too far (≥200 cm) or invalid (≤0 cm), print "Out of range".

Otherwise, print the measured distance in cm to the Serial Monitor.

Wait 500 milliseconds (0.5 sec) before repeating the loop — this controls update rate.